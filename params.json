{"name":"Humanitarian Modeling","tagline":"Modélisation d'un système d'information dédié à l'humanitaire","body":"[TOC]\r\n\r\n----------\r\n##Partie I : Approche de modélisation Système (SysML)\r\n------------------------\r\n\r\n####I- Introduction\r\nCette partie à pour objectif de fournir une description systémique répondant à la problématique qui est de pouvoir proposer une solution informatique afin d'améliorer la logistique sur le terrain, d'actions humanitaires.\r\nNous allons d’abord introduire le système et son contexte dans la partie Définition du contexte du système afin de fixer les idées et de permettre la compréhension de la suite de ce document. Nous essaierons de répondre au maximum aux exigences imposées et induites dans l’appel d’offre dans la partie Diagramme\r\nd’exigences. Nous détaillerons ensuite quelques exigences à l’aide de diagrammes de Cas, d’Activité, de Séquence dans une optique de clarification.\r\nLa partie sysML n’est pas exhaustive dans le sens ou un très grand nombre de diagrammes peuvent être ajoutés pour compléter cette documentation. Nous avons pertinemment sélectionné les diagrammes afin de fournir une vue simple et compréhensible. Notre démarche est guidée par l’exemple SysML de l’OMG suivant : [http://www.omg.org/ocsmp/HSUV.pdf(#http://www.omg.org/ocsmp/HSUV.pdf)<i class=\"fa fa-link\"></i>\r\n\r\n\r\n####II- Définition du contexte du système\r\n#####II.1- Vue quasi-réelle du système\r\nLes images suivantes représentent le système dans son environnement et les acteurs interagissants sur le système.\r\n\r\n![GitHub Logo]()\r\n\r\n![GitHub Logo](/images/logo.png)\r\n\r\n![GitHub Logo](/images/logo.png)\r\n\r\n<i class=\"fa fa-exclamation\"></i> Description des images dans II.2\r\n#####II.2- Diagramme de contexte\r\n\r\n![GitHub Logo](/images/logo.png)\r\n\r\n<i class=\"fa fa-exclamation\"></i>\r\nLe système est composé d’un ensemble de terminaux (mobiles ou non) et d’un ensemble de serveurs. Les\r\nterminaux et les serveurs forment deux sous systèmes qui interagissent entre eux.\r\nNous avons trouvé judicieux de réutiliser les systèmes déjà présents afin de rentabiliser les données et de\r\ncollaborer avec le plus grand nombre. C’est pour cela que les serveurs du système doivent être capable de\r\nréutiliser les données des serveurs d’un organisme déjà présent.\r\nPar exemple, si un agent sur place travaille depuis 20 ans sur un projet et que toutes ses données sont stockées\r\nsur les serveurs d’une ONG, il parait aberrent de lui demander de re-saisir les données en s’adaptant\r\nà notre\r\napplication. Le système ainsi développé n’aurait aucun succès parmi les personnes déjà sur place.\r\nUn système dans un tel milieu fait face\r\na des contraintes environnementales et a besoin de connectivités\r\nadaptables.\r\n\r\n####III- Les diagrammes d'exigences\r\nPour répondre au mieux au vaste et libre sujet, nous avons sélectionné des exigences génériques que nous\r\nraffinons ensuite pour arriver `\r\na un niveau de détails suffisant. Certaines exigences significatives sont ensuite\r\ndétaillées à l’aide d’autres diagrammes pour permettre leur compréhension et/ou leur traçabilité. Nous avons\r\nessaye le plus possible de nous détacher du prisme logiciel durant cette phase\r\n\r\n#####III.1- Hiérarchie d'exigences\r\n![GitHub Logo](/images/logo.png)\r\n\r\nVoici une liste non exhaustive des exigences du système. Elles ont  ́et ́e choisies pour leur aspect fondamental\r\net générique. La documentation peut être directement trouvée sur le diagramme.\r\n\r\n#####III.2- Raffinement d'exigences\r\n![GitHub Logo](/images/logo.png)\r\n\r\nVoici un raffinement des feuilles de l’arbre de la partie III.1. La documentation peut etre directement trouvee\r\nsur le diagramme\r\n\r\n#####III.3- Détails d'exigences\r\nLes exigences nécessitants un travail de réflexion particulier sont détaillées dans cette partie `\r\na l’aide de\r\ndiagrammes de Cas 1 , Séquence et Activité. Ces diagrammes seront présentes dans leur partie respective. Ici\r\nnous présentons seulement la fa ̧con dont les exigences sont détaillées.\r\nNote 1: Le lien \"refine\" est représente par une note dans notre AGL (Astah sysml)\r\n\r\n##### Détail de Autonome\r\n![GitHub Logo](/images/logo.png)\r\n\r\n##### Détail de connecté\r\n![GitHub Logo](/images/logo.png)\r\n\r\n##### Détail de Renseignable\r\n![GitHub Logo](/images/logo.png)\r\n\r\n##### Détail de Interrogeable\r\n![GitHub Logo](/images/logo.png)\r\n\r\n#####III.4- Table d'exigences\r\nToutes les exigences et leur description sont exprimées dans le tableau suivant:\r\n\r\nID  | Name         \t| Text\r\n----|---------------|-------------\r\n5   |Résistance \t|Le système doit tenir face à des températures variables, des milieux humides et aussi à d’éventuels chocs\r\n10\t|\tAutonomie\t|En cas de problème de courant, le système doit pouvoir continuer à assurer un fonctionnement minimal ou au moins ne pas perdre ses données\r\n6   |Durable        |Le système doit pouvoir être mis en place pour une durée particulièrement longue\r\n9       | Portabilité \t\t     |Le système doit pouvoir être positionné dans des zones accidentés et critiques\r\n3       | Connecté               | Le système doit pouvoir communiquer de multiples façons avec l'extérieur et à l'intérieur même du système\r\n4       | Accès                     | Le système doit être très accessible, dans les milieux à risque, quasiment déconnectés\r\n20\t | Maillage wifi\t\t\t |Les terminaux doivent être capable de communiquer entre eux jusqu’à la station de base\r\n2 | Stockage |Le doit pouvoir stocker des informations\r\n18 |Batterie alternative en cas de coupure de d’électricité pour les éléments mobiles du système\r\n16 | Antenne Radio | Le système doit être équipé\r\n15 | Antenne GPS   | Le système doit en être équipé\r\n14 | Antenne GSM   | Le système doit en être équipé\r\n13 | Antenne Wifi  | Le système doit en être équipé\r\n17 | Antennes      |  Le système doit en être équipé\r\n12 | Alimentation  | Le système à besoin d'électricité pour fonctionner\r\n11 | Mémoire       | Le système doit disposer d'une mémoire pour assurer le stockage de données en vue son utilisation ultérieure\r\n8   | Renseignable | Pour s'adapter et être polyvalent, le système doit pouvoir obtenir les informations d'autres systèmes extérieurs et acteurs extérieurs\r\n7 | Traduit | Le système doit être utilisé par le plus grand nombre, et vu le nombre limité de connaissances linguistiques des potentiels utilisateurs, il faut que les informations sur le systèmes puissent être traduites\r\n19 | Interrogeable | Le système doit être facilement consultable depuis l'intérieur et l'extérieur\r\n1  | Ouvert |Le système doit pouvoir s'adapter à d'autres modules complémentaires et à des systèmes déjà présents dans les zones où il y a des actions humanitaires\r\n\r\n####IV- Les diagrammes de cas\r\n**Haut niveau**\r\n![GitHub Logo](/images/logo.png)\r\nVoici les cas d’utilisation vu du niveau le plus haut. Nous avons choisi de laisser le raffinement de ces derniers\r\ndans la partie 2.\r\n\r\n**Accroître l'autonomie**\r\n![GitHub Logo](/images/logo.png)\r\nCe diagramme de cas sert `\r\na raffiner l’exigence Autonomie. Il décrit succinctement la fa ̧con dont peut être\r\nvu cette exigence. Dans notre cas, un technicien peut avoir à démarrer un groupe  ́électrogène si une panne\r\nde courant se produit afin que le serveur soit de nouveau opérationnel\r\n\r\n**Connecter**\r\n![GitHub Logo](/images/logo.png)\r\nCe diagramme de cas sert `\r\na raffiner l’exigence Connecté. Il décrit succinctement la fa ̧con dont peut être vu\r\ncette exigence. Dans notre cas, un technicien peut avoir à câbler un serveur afin qu’il soit accessible sur un\r\nréseau à partir de divers terminaux, et un utilisateur peut activer un réseau (que ce soit réseau wifi, radio\r\nou GPS) en allumant son terminal.\r\n\r\n**Interroger**\r\n![GitHub Logo](/images/logo.png)\r\nCe diagramme de cas sert `\r\na raffiner l’exigence Interrogeable. Il décrit succinctement la fa ̧con dont peut être\r\nvu cette exigence. Dans notre cas, un utilisateur doit pouvoir effectuer une recherche ou bien consulter des\r\ndonnées sur un serveur `\r\na partir d’un terminal.\r\n\r\n**Renseigner**\r\n![GitHub Logo](/images/logo.png)\r\n\r\nCe diagramme de cas sert `\r\na raffiner l’exigence Renseignable. Il décrit succinctement la fa ̧con dont peut être\r\nvu cette exigence. Dans notre cas, un utilisateur privilégie doit pouvoir saisir des données qui seront ajoutées\r\ndans la base de données du serveur du système. Un transfert de données peut avoir lieu entre le système et\r\nun système humanitaire existant.\r\n\r\n\r\n####V- Les diagrammes d'activité\r\nCes diagrammes n’ont pour objectifs que la description du déroulement d’une action effectuée sur le\r\nsystème par les acteurs extérieurs. Ils reprennent les précédents cas d’utilisation pour une continuité dans le\r\nraisonnement.\r\n\r\n**Autonome**\r\n![GitHub Logo](/images/logo.png)\r\n\r\nCe diagramme de cas sert `\r\na décrire l’action : Accroître l’Autonomie, qui peut être vu comme un cas d’utilisation pour le technicien. Si une panne de courant survient, le technicien doit être en mesure de pouvoir\r\ndémarrer le groupe électrogène afin de permettre le redémarrage du serveur. Si le groupe  ́électrogène est\r\ndéjà allume, il ne reste qu’`\r\na redémarrer le serveur, si celui ci n’est pas déjà rallume.\r\n\r\n**Connecter**\r\n![GitHub Logo](/images/logo.png)\r\nCe diagramme de cas sert à écrire l’action : Connecter le système, qui peut être utile au technicien avec le\r\nserveur) comme `\r\na l’utilisateur avec le terminal). Le technicien peut avoir à câbler un serveur afin qu’il soit\r\naccessible sur un réseau, si le réseau n’est pas déjà câblé. Une fois fait, il allume le serveur afin de permettre\r\nau réseau d’être accessible via des terminaux. L’utilisateur lui, peut utiliser des terminaux pour activer un\r\nréseau. Pour cela, il doit allumer son terminal. Une fois fait, il peut activer le réseau.\r\n\r\n**Interroger**\r\n![GitHub Logo](/images/logo.png)\r\nCe diagramme de cas sert `\r\na décrire l’action : Interroger le système, elle peut être effectuée par n’importe\r\nquel utilisateur. Les droits d’accès sont trait ́es dans la partie 2. Si son terminal est  ́éteint, l’utilisateur doit\r\nl’allumer. Ensuite, il peut soit effectuer une recherche, soit consulter les données. Sa demande peut  ́également\r\nêtre rejetée.\r\n\r\n**Renseigner**\r\n![GitHub Logo](/images/logo.png)\r\nCe diagramme de cas sert à décrire l’action : Renseigner le système, elle peut être effectuée par un utilisateur\r\nprivilégié. Les droits d’accès sont trait ́es dans la partie 2. L’utilisateur peut ajouter des données qui seront\r\nstockées sur le serveur. Pour cela, le serveur doit être allume. Ensuite, l’utilisateur peut saisir les données\r\nqui devront être enregistrées.\r\n\r\n####VI- Les diagrammes de séquences\r\nLes diagrammes suivants nous permettrons de mettre en exergue une description chronologique des\r\ninteractions entre le système et les acteurs. Ils ne couvrent pas l’ensemble des interactions et sont en liens\r\navec les diagrammes précédents afin de maintenir une traçabilité ́. Aussi nous avons associe à ces diagrammes\r\nune vue dite boıte noire afin de collecter les différents messages transmis entre le système et les acteurs\r\n\r\n**Autonomie**\r\n![GitHub Logo](/images/logo.png)\r\nCes diagrammes correspondent au cas d’utilisation Autonomie. Ici, nous exprimons le fait que le système,\r\ndoit pouvoir fonctionner continuellement, il est prévu qu’un technicien puisse mettre en marche un groupe\r\n ́électrogène en cas de coupure d'électricité par exemple, pour fournir l’électricité nécessaire aux différents\r\nserveurs ; afin d’assurer une pérennité des différents services\r\n\r\n**Interroger**\r\n![GitHub Logo](/images/logo.png)\r\nCes diagrammes correspondent au cas d’utilisation Interroger. Ils expriment l’interrogation d’un serveur\r\ndepuis une machine terminale (utilisateur lambda ). En effet un utilisateur pour pouvoir interroger un serveur\r\ndoit au préalable mettre sous-tension son terminal, ensuite il peut soit faire une consultation concernant une\r\ninformation donnée, soit effectuer une recherche (Rechercher une personne ). Les serveurs doivent en retour\r\npouvoir fournir une réponse `\r\na cette interrogation\r\n\r\n**Renseigner**\r\n![GitHub Logo](/images/logo.png)\r\nCes diagrammes correspondent au cas d’utilisation Renseigner. Ils mettent en exergue, le fait de pouvoir\r\nrenseigner les différents serveurs qui appartiennent à notre système. Il faut au préalable que ceux- ci soient\r\nmis en marche, ensuite il est possible d’effectuer une saisie de données depuis des machines terminales\r\nspécifiques, afin de remplir les tables des bases de données existantes sur les différents serveurs.\r\n\r\n####1.7- Conclusion\r\n-------------------------------\r\nNous arrivons au terme de la modélisation SysML. Nous avons éclairci les points suivants:\r\n— Définition du système et de son contexte\r\n— Élaboration du cahiers des charges à l’aide du diagramme d’exigences\r\n— Définition d’un certain nombre de cas d’utilisation en lien avec le cahier des charges\r\n— Description du déroulement de certaines actions avec le diagramme d’activité\r\n— Planification des interactions du système avec l’extérieur par le diagramme de séquence\r\nIl s’agit maintenant de changer de prisme de conception. Nous allons d'écrire la partie la plus importante de cette documentation à travers le prisme logiciel cette fois.\r\n\r\n##Partie II : Approche de modélisation logicielle\r\n---------------------------------------------------------\r\n\r\n####I-Introduction\r\nL’objectif de cette partie de la modélisation, consiste à proposer un modèle de notre système d’information\r\nvu d’un prisme logiciel cette fois ci. En effet, l’utilisation de UML pour modéliser ce système apparaît comme\r\nune  ́évidence dans la mesure ou la modélisation UML permet d’obtenir une modélisation de tr`es haut niveau\r\nindépendante des langages et des environnements, aussi d’exprimer dans un seul modèle tous les aspects\r\nstatiques, dynamiques, spécifications, etc... Ce qui constitue notre principal objectif. Pour ce faire, nous allons\r\ntout d’abord procéder `\r\na une définition succincte du cahier de charges, puis nous exprimerons par la suite\r\nles aspects Fonctionnel (diagrammes de Cas d’Utilisation), Statique (diagrammes de Classes), Dynamique\r\n ́\r\n(diagrammes d’ Etats, diagrammes activistes), pour chaque exigence exprimée dans le dit cahier de charges.\r\n\r\n\r\n####II-Définition du cahier des charges\r\nVoici une liste de phrases simples visant à définir les besoins fonctionnels de notre application. Nous\r\nessaierons de satisfaire chacune d’elle et de détailler leur satisfaction dans les parties suivantes.\r\n1. Permettre aux proches d’un sinistre de pouvoir consulter les informations de celui-ci.\r\n2. Permettre `\r\na une ONG d’organiser et gérer une campagne de vaccination.\r\n3. Permettre aux ONG de se coordonner.\r\n4. Permettre au personnel sur place de gérer les stocks dans les infrastructures.\r\n5. Permettre l’information pertinente des populations.\r\nPour chacune des exigences précédentes nous présenterons les diagrammes selon la démarche suivante :\r\n ́\r\nCas → Classe → Etat → Activité.\r\n\r\n####III-Réponses aux exigences\r\n#####III.1- Permettre aux proches d'un sinistré de pouvoir consulter les informations de celui-ci\r\nLes proches d’un sinistre peuvent consulter ses informations. Il y a deux notions à  ́éclaircir : la première,\r\nappelons la notion information, est le fait qu’un sinistre doit effectivement avoir des informations qui\r\npuissent aider ses proches `\r\na le retrouver ; la deuxième, appelons la notion proche, implique que des relations\r\nsociales entre les sinistres doivent être prises en charge au sein de notre application. Nous allons  ́éclaircir ces\r\ndeux notions à l’aide de diagrammes UML dans les parties suivantes\r\n\r\n**Éclaircissement des notions**\r\n![GitHub Logo](/images/logo.png)\r\n\r\nNous n’avons pas représente l’authentification par soucis de clarté. Il ne faut pas que n’importe quel utilisateur sache ou se trouve un réfugie. Par exemple, lors d’une guerre civile, si un sinistre est recherche par un\r\nchef de guerre et que ce sinistre est recense dans un camp de réfugie, il ne doit pas pouvoir le localiser. Seul\r\nles personnes autorisées par le réfugie peuvent accéder aux informations.\r\n![GitHub Logo](/images/logo.png)\r\n\r\n![GitHub Logo](/images/logo.png)\r\n\r\nLes points importants `\r\na noter ici sont les relations et la visibilité d’une fiche de liaison.\r\nUne relation signifie que deux sinistres peuvent être qualifies de ”proches”.\r\nLa visibilité d’une fiche de liaison permet de protéger ses informations et de ne les partager qu’avec un\r\ngroupe restreint.\r\n\r\n![GitHub Logo](/images/logo.png)\r\n\r\nNous considérons ici que la gestion des mouvement des réfugies s’effectue dans un camp de réfugies donne. Lorsqu'un\r\nagent qui travaille dans ce camp désire gérer le mouvement d’un réfugié par rapport à ce camp, il commence par lancer\r\nl’outil de gestion de mouvements de réfugiés. Il doit ensuite entrer les informations nécessaires à son authentification\r\n(Identifiant agent,mot de passe, etc ...). Pour des raisons de sécurité, tout comme pour le diagramme d'états ”Gestion\r\nCampagne”, s’il survient trois erreurs consécutives d’authentification, le compte utilisateur est bloque et on fait appel\r\na un administrateur qui renvoie de nouvelles informations d’authentification pour cet agent. S’il y a eu moins de\r\n`\r\ntrois erreurs et que l’identifiant et le mot de passe sont corrects, alors l’agent peut accéder à l’interface de gestion de\r\nmouvements sur lequel il peut soit modifier des mouvements déjà existants, soit enregistrer un nouveau mouvement.\r\n* Si l’agent effectue un clic sur le bouton ”enregistrer” l’outil passe à l’ ́état ”enregistrement mouvement”. L’utilisateur peut donc dans cet état vérifier si il existe déjà des informations relatives au réfugie concerne, si oui il récupère\r\nces informations , sinon il effectue une nouvelle saisie des informations suivantes : Identité(nom, prénom, date de\r\nnaissance, sexe, etc), type de mouvement (flux entrant ou sortant du camp), date et lieu de l’enregistrement, motif,\r\netc ... Si l’agent valide (clic bouton valider) les informations saisies et que ces données sont valides, l’outil entre dans l’état ”envoi des données” dans lequel il effectue un transfert de ces données vers un serveur, puis il se met en attente\r\nd’un accusé de réception. Quand l’accusé de réception est reçu, l’outil passe à l’état ”fin enregistrement” dans lequel\r\nil affiche une confirmation de l’enregistrement des données. Apres quoi, l’agent peut soit demander d’effectuer un\r\nnouvel enregistrement et l’outil retournera `\r\na l’état ”enregistrer mouvement”, soit faire une demande de modification\r\n ́\r\net passer `\r\na l’ Etat\r\nmodification mouvement, soit effectuer une déconnexion ce qui amènera l’outil à retourner `\r\na l’état authentification”.\r\n** Si l’agent effectue un clic sur le bouton ”modifier” l’outil passe à l’état ”modification mouvement”. L’utilisateur\r\npeut alors choisir une ligne parmi tous les enregistrements existants, sur laquelle il peut faire des modifications. De\r\nmême, si ces modifications sont validées par l’agent et que les données sont valides, l’outil entre dans l’etat ”envoi des données” et il s’en suit les mêmes actions exprimées dans le paragraphe précédent.\r\n\r\n\r\n![GitHub Logo](/images/logo.png)\r\n\r\nIci, le personnel d’un camp gère les mouvements des sinistres présents dans le camp. Pour cela, le personnel\r\ndoit d’abord se connecter. Ensuite, si le réfugié n’existe pas dans le camp, un profil lui est créé, sinon, le personnel cherche à obtenir les informations le concernant. Si le réfugié sinistre n’a effectue aucun déplacement,\r\nalors le personnel devra saisir le type, le motif, la date et le lieu du mouvement. Si un mouvement a déjà\r\nété effectue, alors le personnel modifiera ces informations. Une fois les données saisies, le mouvement est\r\nenregistre pour le sinistre.\r\n\r\n![GitHub Logo](/images/logo.png)\r\n\r\nDans le cas présent, un utilisateur veut consulter les informations d’un réfugié. Pour cela il devra effectuer\r\nune recherche contenant le nom, l’age et la ville d’origine du réfugié. Une fois les informations saisies, la\r\nrecherche s’effectue et lui donnera la liste des réfugiés correspondants.\r\n\r\n\r\n\r\n\r\n\r\n\r\n#####III.2- Permettre à une ONG d'organiser et gérer un campagne de vaccination\r\nAfin de rendre le travail sur le terrain efficace, il faut qu’il soit organise. Pour cela, il faut que dans notre\r\napplication, une ONG puisse planifier ses stratégies de soutiens à travers différentes campagnes. Il a deux\r\nnotions a  ́éclaircir : la première, appelons la notion ONG est le fait de représenter un utilisateur particulier\r\ndans notre application ; la deuxième, appelons la notion campagne est le fait de représenter une campagne\r\norganisée par une ONG.\r\n\r\n** Éclaircissement des notions**\r\n\r\n![GitHub Logo](/images/logo.png)\r\n\r\n\r\n#####III.3- Permettre aux ONG de se coordonner\r\nTous les comptes qualifies de professionnels ont accès à certaines données sensibles. Ces données peuvent\r\npermettre de planifier des campagnes, réapprovisionner des stocks..\r\n\r\n![GitHub Logo](/images/logo.png)\r\n\r\n![GitHub Logo](/images/logo.png)\r\n\r\nLes catastrophes peuvent être attachées à d'autres classes selon les besoins, elles peuvent être par exemple\r\nreliées à un lieu, une durée,... par soucis de simplification ces classes n’apparaissent pas ici. Il en est de même\r\npour les campagnes.\r\n\r\n![GitHub Logo](/images/logo.png)\r\n\r\nLorsqu'une ONG désire gérer une campagne, une personne membre de cette ONG doit entrer l’identifiant\r\net le mot de passe correspondants à cette ONG. Pour des raisons de sécurité, s’il y a eu trois erreurs\r\nconsécutives, lors de la quatrième fois que l’utilisateur valide l’identifiant et le mot de passe qu’il a entres, le compte est bloque et il ne sera débloqué que lorsque l’administrateur l’aura fait et aura renvoyé un nouvel\r\nidentifiant avec un nouveau mot de passe a ` l’ONG.\r\nS’il y a eu moins de trois erreurs et que l’identifiant et le mot de passe sont corrects, alors l’utilisateur\r\nmembre de l’ONG choisit s’il désire créer une nouvelle campagne ou s’il désire en modifier une déjà créée.\r\nS’il souhaite créer une nouvelle campagne, alors il doit choisir un sujet puis le valider, il doit ensuite saisir\r\nune zone cible et la valider et pour finir, il doit choisir la population cible et valider à nouveau. La campagne\r\nsera alors créée.\r\nSi le membre de l’ONG désire modifier une campagne déjà créée, il doit alors entrer le sujet, la zone cible et\r\nla population cible de la campagne `\r\na modifier et valider ces informations.\r\nSi aucune campagne créée par l’ONG identifiée ne correspond aux données entrées par l’utilisateur, alors ce\r\ndernier est invite `\r\na entrer de nouveau les données correspondantes à la campagne à modifier.\r\nSi une campagne créée par l’ONG identifiée correspond aux données entrées, alors le membre de l’ONG\r\ndoit saisir un nouveau sujet et le valider, une nouvelle zone cible et la valider et il doit entrer une nouvelle\r\npopulation cible et la valider  ́également. La campagne sera alors modifiée.\r\n\r\n![GitHub Logo](/images/logo.png)\r\n\r\nOn considère dans notre cas qu’une ONG veut gérer une campagne. Pour cela elle doit d’abord s’authentifier.\r\nSi les informations d’authentification sont erronées, alors l’ONG doit retenter de se connecter avec des\r\ninformations valides. Une fois la connexion réussie et la demande de gérer une campagne effectuée, si les\r\ninformations sur la campagne n’ont pas  ́et ́e saisies, l’ONG doit saisir le type, le sujet, la zone cible et la\r\npopulation cible de la campagne. Si l’une de ces informations est erronée, elle devra être ressaisie jusqu'à ce\r\nqu’elle soit valide. Si les données de la campagne ont déjà  ́été saisies par le passe, l’ONG peut les modifier (si\r\nles informations modifiées ne sont pas valides, l’ONG devra les ressaisir jusqu'à ce qu’elles soient correctes).\r\nUne fois toutes les informations saisies, elles seront enregistrées pour la campagne en cours.\r\n\r\n\r\n\r\n\r\n#####III-3 Permettre aux ONG de se coordonner\r\nCette exigence est satisfaite implicitement par l’exigence précédente. Il suffit que les responsables des\r\ndifférentes ONG consultent les informations relatives aux autres ONG et qu’ils choisissent les mesures `\r\na\r\nprendre. Cela relève plus de décisions politiques au sens large et cela nous concerne peu ou serai assez\r\ncomplexe à mettre en place (mécanismes de rappel de campagne, algorithmes de suggestion de campagne,\r\netc...)\r\n\r\n#####III-4 Permettre au personnel sur place de gérer les stocks dans les infrastructures\r\nLa gestion de stock implique que chaque infrastructure doit être administrée par une personne ou un\r\ngroupe de personnes. On doit pouvoir effectuer des commandes en cas de ruptures de stock. Il y a deux\r\nnotions à  ́éclaircir : la première, appelons la gestion, est la représentation d’un utilisateur particulier charge\r\nde la gestion des stock dans une infrastructure ; la deuxième, appelons la stock, est la représentation d’un\r\nstock de produits.\r\n\r\n**Éclaircissement des notions**\r\n![GitHub Logo](/images/logo.png)\r\n\r\nUn compte d’administration d’une infrastructure doit fournir une possibilité de gestion de stock. C’est un\r\ntype de compte professionnel par infrastructure.\r\n\r\n![GitHub Logo](/images/logo.png)\r\n\r\nIl existe une multitude de patrons UML pour la gestion de stock mais par souci de simplicité nous en avons\r\nconçu un. Pour  ́éviter de stocker plusieurs fois les détails d’un produit nous avons décide de faire une classe\r\nde détail dédiée. Le compte d’administration peut être représente par un compte d’une personne morale\r\ndans un camp de réfugies par exemple et il administrera tout le camp de réfugies.\r\n\r\n![GitHub Logo](/images/logo.png) afin de gérer le stock, on vérifie le niveau de l’inventaire. S’il y a encore assez de produits en stock, on ne\r\ncommande rien alors que si le nombre de produits restant est faible, on recherche le produit à commander\r\net une fois trouve, on le commande.\r\n\r\n![GitHub Logo](/images/logo.png)\r\n\r\nPour gérer un stock, un professionnel, qui est soit une personne membre d’une ONG, soit un personnel d’un\r\ncamp ou soit un employé de sante doit tout d’abord s’authentifier. Si l’identifiant entre et le mot de passe\r\nentre correspondent `\r\na l’identifiant et au mot de passe d’un professionnel, alors le professionnel peut consulter\r\nle stock, sinon il est invite `\r\na entrer de nouveau un identifiant et un mot de passe.\r\nSi le stock est insuffisant, le professionnel connecte peut alors passer une commande du(des) produit(s) dont\r\nle stock est insuffisant. Si le stock restant est suffisant, le professionnel ne passe pas de commande.\r\n\r\n#####III-5 Permettre la diffusion de messages pertinents aux populations\r\nLes sinistres peuvent être cibles de messages aux objectifs différents. Ils sont cibles par des organismes\r\npour des campagnes. Il y a une notion a  ́éclaircir : notion information\r\n\r\n**Éclaircissement des notions**\r\n\r\n![GitHub Logo](/images/logo.png)\r\n\r\n![GitHub Logo](/images/logo.png)\r\n\r\nUn sinistre est cible par une campagne et reçoit des messages la concernant. Ces messages sont choisis et\r\nenvoyés par un responsable au sein d’une ONG. C’est une fa ̧con de contribuer à l’information pertinente des\r\npopulations.\r\n\r\n![GitHub Logo](/images/logo.png) à chaque nouvelle information, celle-ci est vérifiée afin de savoir si cette information est importante ou non.\r\nSi elle ne l’est pas, elle ne sera pas diffusée et si elle est importante, elle sera diffusée via réseau GSM, wi-fi\r\net radio. Cependant un incident radio, GSM et/ou wi-fi peut avoir lieu. Dans ce cas, si un incident lors de\r\nla diffusion radio a lieu par exemple, le système continuera d’essayer de diffuser cette information via radio\r\njusqu'à ce qu’elle soit bien envoyée, et il en est de même s’il se produit un incident de diffusion via wi-fi ou\r\nvia GSM\r\n\r\n![GitHub Logo](/images/logo.png)\r\n\r\nDans notre cas, une ONG veut diffuser une information. L’information est d’abord triée, afin de déterminer\r\nson importance. Si elle n’est pas importante, elle n’est pas diffusée, sinon, elle sera diffusée.\r\n\r\n####IV-Diagrammes complémentaires\r\n#####IV-1 Diagrammes de Cas\r\n![GitHub Logo](/images/logo.png)\r\n\r\nVoici le diagramme de cas complet du système, les commentaires ont  ́été place directement sur le diagramme\r\ncar ils se rapportent `\r\na certaines parties du diagramme.\r\n#####IV-2 Diagrammes de Classe\r\n![GitHub Logo](/images/logo.png)\r\nVoici le diagramme de classe complet du système. Bien sûr, on pourrait ajouter des  ́éléments comme la\r\ngestion des droits d’accès mais cela alourdirai considérablement le diagramme.\r\nOn retrouve l’ensemble des petits diagrammes de classe utilises dans les parties précédent\r\n#####IV-3 Diagrammes d'Etat\r\n![GitHub Logo](/images/logo.png)\r\nLorsqu'un utilisateur désiré rechercher un réfugié, il doit entrer dans un terminal (mobile ou non) le nom,\r\nle prénom et la date de naissance de la personne qu’il désire trouver. L’utilisateur peut envoyer la requête\r\nau serveur uniquement si tous les champs requis sont bien tous remplis (nom, prénom et date de naissance\r\ndans notre cas).\r\nUne fois la requête envoyée au serveur, le serveur vérifie dans la base de données contenant les camps ainsi que\r\nles réfugies qui s’y trouvent si la personne recherchée se trouve dans l’un des camps. Si c’est le cas, le serveur\r\nenvoie les informations relatives au camp o`\r\nu se trouve le réfugie recherche à l’utilisateur, sinon le serveur\r\nsignale à l’utilisateur qu’aucune personne n’a  ́été trouvée et le renvoie sur la page de saisie d’informations\r\nafin de chercher une personne `\r\na nouveau s’il le désire.\r\nCependant, un incident réseau peut avoir lieu lors de la validation des informations par l’utilisateur ou lors\r\nde la réponse du serveur.\r\n\r\n#####IV.4 Diagrammes d'activité\r\n![GitHub Logo](/images/logo.png)\r\nOn considéré ici qu’un sinistre (ie. personne qui subit les conséquences liées a une catastrophe et qui ne se\r\ntrouve pas forcement dans un camp de réfugiés) peut créer un compte depuis un terminal : Sur un terminal,\r\nune fois l’application de création de compte lancée, l’utilisateur peut saisir des informations le concernant\r\nvia un formulaire d’inscription . si les informations saisies sont déjà utilises ou erronées l’outil d’inscription\r\nredemande une saisie des informations par un nouveau formulaire. Si les informations sont valides alors\r\nelles seront enregistrées sur le serveur sous la forme d’un nouveau compte afin de permettre une connexion\r\nultérieure.\r\n\r\n![GitHub Logo](/images/logo.png)\r\n\r\nDans notre cas, un sinistre veut rechercher un camp. Pour cela, il doit saisir un lieu via son terminal. Si le\r\nlieu n’existe pas, il devra en retaper un valide. Si il est correct, la recherche s’effectue et lui donnera la liste\r\ndes camps à proximité du lieu.\r\n\r\n####V-Conclusion\r\nNous arrivons au terme de la modélisation UML. Nous avons éclairci les points suivants\r\n— Définition du cahiers des charges,\r\n— Réponse aux exigences grâce à certains cas d’utilisation en lien avec le cahier des charges,\r\n— Description précise et concise du l’état du système via des diagrammes de classes\r\n— Description du déroulement de certaines actions avec les diagrammes d’activités,\r\n— Planification des interactions du système avec l’extérieur par le diagramme de séquence.\r\nUML est un support pour les développeurs, la compréhension du problème leur ai facilitée et ils peuvent\r\ndébuter la programmation directement au contraire du sysML qui est plus adapte d’un point de vue\r\ningénierie.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}